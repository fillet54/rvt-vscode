{
    "scopeName": "source.rvt",
    "patterns": [
        {
            "include": "#block-expression"
        },
        {
            "include": "#comment-expression"
        }
    ],
    "repository": {
        "block-expression": {
            "name": "meta.function.block",
            "begin": "^\\s*([a-zA-Z_][a-zA-Z_0-9]*)",
            "end": "\\n$",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.type.block"
                }
            },
            "patterns": [
                {
                    "include": "#dict-expression"
                },
                {
                    "include": "#comment-expression"
                },
                {
                    "include": "#linecontinuation"
                },
                {
                    "include": "#connector"
                },
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#string-literal"
                }
            ]
        },
        "numeric-literal": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.rvt",
                    "match": "\\b0(x|X)[0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.binary.rvt",
                    "match": "\\b0(b|B)[01]+\\b"
                },
                {
                    "name": "constant.numeric.octal.rvt",
                    "match": "\\b0[0-7]+\\b"
                },
                {
                    "name": "constant.numeric.decimal.rvt",
                    "match": "\\b[0-9]+(\\.[0-9]+)?\\b"
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "match": "(?i)true",
                    "name": "constant.language.boolean.true"
                },
                {
                    "match": "(?i)false",
                    "name": "constant.language.boolean.true"
                }
            ]
        },
        "string-literal": {
            "patterns": [
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single"
                },
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double"
                }
            ]
        },
        "linecontinuation": {
            "match": "\\\\\\n$",
            "name": "punctuation.seperator.continuation.line"
        },
        "comment-expression": {
            "begin": "#",
            "end": "\\n",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment"
                }
            },
            "name": "comment.line.number-sign",
            "patterns": [
                {
                    "include": "#requirement-id"
                }
            ]
        },
        "requirement-id": {
            "match": "\\$[^\\s]+",
            "name": "keyword.codetag.notation.requirementid"
        },
        "dict-expression": {
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.dict.open"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.dict.close"
                }
            },
            "name": "expression.group",
            "patterns": [
                {
                    "include": "#dict-expression"
                },
                {
                    "include": "#comment-expression"
                },
                {
                    "include": "#linecontinuation"
                },
                {
                    "include": "#connector"
                },
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                },
                {
                    "include": "#string-literal"
                }
            ]
        },
        "connector": {
            "begin": "[a-zA-Z_][a-zA-Z_0-9]+(\\.)",
            "end": "\\s",
            "name": "string.connector",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.seperator.period"
                }
            },
            "patterns": [
                {
                    "match": "\\.",
                    "name": "punctuation.seperator.period"
                }
            ]
        }
    }
}